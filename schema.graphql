schema {
  query: RootQueryType
}

type QuestRootObject {
  id: ID!
  name: String!
  resources(first: Int, last: Int, after: String, before: String): ResourceConnection
  program: Program
}

interface Edge {
  cursor: String!
  node: Node!
}

type QuestConnection implements Connection {
  edges: [QuestEdge]
  edgesCount: Int!
  pageInfo: PageInfo!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Quests {
  nodes: [Quest]
  totalCount: Int!
}

interface Node {
  id: ID!
}

type Quest implements Node {
  id: ID!
  name: String!
  resources: Resources
  program: Program
}

type ResourceConnection implements Connection {
  edges: [ResourceEdge]
  edgesCount: Int!
  pageInfo: PageInfo!
}

type RootQueryType {
  "A list of program objects paginated with Relay standard."
  programs(first: Int, last: Int, after: String, before: String): ProgramConnection

  program(id: ID!): ProgramRootObject

  "A list of quest objects paginated with Relay standard."
  quests(first: Int, last: Int, after: String, before: String): QuestConnection

  quest(id: ID!): QuestRootObject

  "A list of resource objects paginated with Relay standard."
  resources(first: Int, last: Int, after: String, before: String): ResourceConnection

  resource(id: ID!): ResourceRootObject
}

type ProgramConnection implements Connection {
  edges: [ProgramEdge]
  edgesCount: Int!
  pageInfo: PageInfo!
}

type ProgramEdge implements Edge {
  cursor: String!
  node: Program!
}

type ResourceRootObject {
  id: ID!
  name: String!
  quest: Quest
}

type ProgramRootObject {
  id: ID!
  name: String!
  quests(first: Int, last: Int, after: String, before: String, name: String): QuestConnection
}

type ResourceEdge implements Edge {
  cursor: String!
  node: Resource!
}

type Resource implements Node {
  id: ID!
  name: String!
  quest: Quest
}

type QuestEdge implements Edge {
  cursor: String!
  node: Quest!
}

interface Connection {
  edges: [Edge]
  edgesCount: Int!
  pageInfo: PageInfo!
}

type Program implements Node {
  id: ID!
  name: String!
  quests: Quests
}

type Resources {
  nodes: [Resource]
  totalCount: Int!
}
